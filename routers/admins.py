from aiogram import Router, F

from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext


from states.states import Admin
from keyboards.builders import admin_button, menu_button, cancel_button, inline_builder

router = Router()


@router.message(F.text == "üë§ Admin")
@router.callback_query(F.data == "main_page")
async def main_menu(message: Message | CallbackQuery):
    pattern = dict(
            text=f"‚úß üë§ Adminlar bo'limi",
            parse_mode=ParseMode.HTML,
            reply_markup=inline_builder(
                ["üë§ Admin ‚ûï", "üë§ Admin ‚ûñ"],
                ["add_admin", "del_admin"],
                row_width=[2])
        )
    await message.answer(**pattern)


@router.callback_query(F.data == "add_admin")
async def main_menu(message: Message | CallbackQuery, state: FSMContext):
    pattern = dict(
        text=f"‚úß ‚ûï user_id ni yuboring",
        parse_mode=ParseMode.HTML,
        reply_markup=cancel_button()
    )
    await message.message.answer(**pattern)
    await state.set_state(Admin.uid)


@router.message(Admin.uid)
async def add_admin(message: Message | CallbackQuery, state: FSMContext):
    with open('data/adminlar.txt', 'r') as f:
        admin_id = [int(line.rstrip()) for line in f]
    if message.text == "üîô Ortga":
        await state.clear()
        if message.chat.id in admin_id:
            await message.answer("‚úß Menyu", reply_markup=admin_button())
        else:
            await message.answer("‚úß Menyu", reply_markup=menu_button())
    uid = int(message.text)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID
    save_admin_id(uid)
    await message.answer("‚úß Admin qo'shildi")
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è


@router.callback_query(F.data == "del_admin")
async def main_menu(message: Message | CallbackQuery, state: FSMContext):
    pattern = dict(
        text=f"‚úß ‚ûñ user_id ni yuboring",
        parse_mode=ParseMode.HTML,
        reply_markup=cancel_button()
    )
    await message.message.answer(**pattern)
    await state.set_state(Admin.min)


@router.message(Admin.min)
async def add_admin(message: Message | CallbackQuery, state: FSMContext):
    with open('data/adminlar.txt', 'r') as f:
        admin_id = [int(line.rstrip()) for line in f]
    if message.text == "üîô Ortga":
        await state.clear()
        if message.chat.id in admin_id:
            await message.answer("‚úß Menyu", reply_markup=admin_button())
        else:
            await message.answer("‚úß Menyu", reply_markup=menu_button())
    uid = int(message.text)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ID
    del_admin_id(uid)
    await message.answer("‚úß Admin o'chirildi")
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è


def save_admin_id(uid):
    with open('data/adminlar.txt', 'a') as f:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'a' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª
        f.write(f"{uid}\n")


def del_admin_id(uid):
    uid = str(uid)  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ uid –∫ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ —á–∏—Å–ª–æ
    try:
        with open('data/adminlar.txt', 'r') as f:
            lines = f.readlines()  # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞

        with open('data/adminlar.txt', 'w') as f:
            for line in lines:
                if line.strip() != uid:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
                    f.write(line)  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫—Ä–æ–º–µ —Ç–æ–π, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ
        pass
